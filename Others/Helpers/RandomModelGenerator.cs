using SearchSystem.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;

namespace SearchSystem.Others.Helpers
{
    internal class RandomModelGenerator
    {
        private static readonly Random random = new Random();

        public static List<object> GenerateRandomObjects(Type model, int count)
        {
            var objects = new List<object>();
            for (int i = 0; i < count; i++)
            {
                objects.Add(GenerateRandomObject(model, i + 1));
            }
            return objects;
        }

        private static object GenerateRandomObject(Type model, int key)
        {
            var obj = Activator.CreateInstance(model);
            CustomizeObject(obj, key);
            return obj;
        }

        private static void CustomizeObject(object obj, int key)
        {
            var objectType = obj.GetType();
            var properties = objectType.GetProperties();

            foreach (var property in properties)
            {
                if (IsAutoGeneratedKey(property))
                {
                    property.SetValue(obj, -key);
                }

                if (property.CanWrite)
                {
                    Type propertyType = property.PropertyType;

                    if (propertyType.IsEnum)
                    {
                        object randomEnumValue = GetRandomEnumValue(propertyType);
                        property.SetValue(obj, randomEnumValue);
                    }
                    else if (propertyType == typeof(bool))
                    {
                        bool randomBoolValue = GetRandomBool();
                        property.SetValue(obj, randomBoolValue);
                    }
                    else if (propertyType == typeof(int))
                    {
                        int randomIntValue = -1;

                        if (property.Name.Equals("Price")) randomIntValue = random.Next(1000, 1000000);
                        if (property.Name.Equals("Power")) randomIntValue = random.Next(70, 1000);
                        if (property.Name.Equals("Mileage")) randomIntValue = random.Next(0, 1000000);
                        if (randomIntValue == -1) randomIntValue = random.Next(900, 15000);

                        property.SetValue(obj, randomIntValue);
                    }
                    else if (propertyType == typeof(DateTime))
                    {
                        DateTime randomDateTimeValue = DateTime.Now;
                        bool randomDateTimeValueSet = false;

                        if (property.Name.Equals("FirstRegistration"))
                        {
                            randomDateTimeValue = GetRandomDateTime(1930);
                            randomDateTimeValueSet = true;
                        }
                        if (!randomDateTimeValueSet) randomDateTimeValue = GetRandomDateTime(2023);

                        property.SetValue(obj, randomDateTimeValue);
                    }
                }
            }
        }

        private static bool IsAutoGeneratedKey(PropertyInfo property)
        {
            return property.GetCustomAttributes(typeof(System.ComponentModel.DataAnnotations.KeyAttribute), true).Any();
        }

        private static object GetRandomEnumValue(Type enumType)
        {
            Array enumValues = Enum.GetValues(enumType);
            return enumValues.GetValue(random.Next(enumValues.Length));
        }

        private static bool GetRandomBool()
        {
            return random.Next(2) == 0;
        }

        private static DateTime GetRandomDateTime(int year)
        {
            DateTime start = new DateTime(year, 1, 1);
            int range = (DateTime.Today - start).Days;
            return start.AddDays(random.Next(range));
        }
    }
}
